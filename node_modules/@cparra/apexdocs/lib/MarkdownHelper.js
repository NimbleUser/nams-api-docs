"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ClassFileGeneratorHelper_1 = require("./ClassFileGeneratorHelper");
const Configuration_1 = require("./Configuration");
class MarkdownHelper {
    constructor(classes) {
        this.contents = '';
        this.classes = classes;
    }
    addBlankLine() {
        this.contents += '\n';
    }
    addTitle(text, level = 1) {
        let title = '';
        for (let i = 0; i < level; i++) {
            title += '#';
        }
        title += ' ';
        title += text;
        this.contents += title;
        this.addBlankLine();
    }
    addText(text) {
        // Parsing text to extract possible linking classes.
        const possibleLinks = text.match(/<<.*?>>/g);
        possibleLinks === null || possibleLinks === void 0 ? void 0 : possibleLinks.forEach(currentMatch => {
            const classNameForMatch = currentMatch.replace('<<', '').replace('>>', '');
            this.classes.forEach(classModel => {
                if (classModel.getClassName() === classNameForMatch) {
                    text = text.replace(currentMatch, ClassFileGeneratorHelper_1.default.getFileLink(classModel));
                }
            });
        });
        // Parsing links using {@link ClassName} format
        const linkFormatRegEx = '{@link (.*?)}';
        const expression = new RegExp(linkFormatRegEx, 'gi');
        let match;
        let matches = [];
        do {
            match = expression.exec(text);
            if (match) {
                matches.push(match);
            }
        } while (match);
        for (const match of matches) {
            this.classes.forEach(classModel => {
                if (classModel.getClassName() === match[1]) {
                    text = text.replace(match[0], ClassFileGeneratorHelper_1.default.getFileLink(classModel));
                }
            });
        }
        this.contents += text;
        this.addBlankLine();
    }
    addHorizontalRule() {
        this.contents += '---';
        this.addBlankLine();
    }
    addLink(title, url) {
        this.contents += `[${title}](${url})`;
    }
    startCodeBlock() {
        var _a;
        this.contents += '```';
        const sourceLanguage = (_a = Configuration_1.default.getConfig()) === null || _a === void 0 ? void 0 : _a.sourceLanguage;
        if (sourceLanguage) {
            this.contents += sourceLanguage;
        }
        this.addBlankLine();
    }
    endCodeBlock() {
        this.contents += '```';
        this.addBlankLine();
    }
}
exports.default = MarkdownHelper;

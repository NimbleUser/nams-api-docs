"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Settings_1 = require("./Settings");
test('has global and public as default scope', () => {
    expect(Settings_1.default.getInstance().getScope()).toHaveLength(2);
    expect(Settings_1.default.getInstance().getScope()).toContain('global');
    expect(Settings_1.default.getInstance().getScope()).toContain('public');
});
test('can set scope', () => {
    const expectedScope = ['private'];
    Settings_1.default.getInstance().setScope(expectedScope);
    expect(Settings_1.default.getInstance().getScope()).toHaveLength(1);
    expect(Settings_1.default.getInstance().getScope()).toContain('private');
});
test('has "docs" as the default output directory', () => {
    expect(Settings_1.default.getInstance().getOutputDir()).toBe('docs');
});
test('can set output directory', () => {
    const directory = 'cutomdir';
    Settings_1.default.getInstance().setOutputDir(directory);
    expect(Settings_1.default.getInstance().getOutputDir()).toBe(directory);
});
test('that the processor can be set', () => {
    const docsProcessor = jest.genMockFromModule('./DocsProcessor');
    Settings_1.default.getInstance().setDocsProcessor(docsProcessor);
    expect(Settings_1.default.getInstance().getDocsProcessor()).toBe(docsProcessor);
});
test('that the config path can be set', () => {
    const configPath = './config.json';
    Settings_1.default.getInstance().setConfigPath(configPath);
    expect(Settings_1.default.getInstance().getConfigPath()).toBe(configPath);
});
test('that shouldGroup can be set', () => {
    const shouldGroup = false;
    Settings_1.default.getInstance().setShouldGroup(shouldGroup);
    expect(Settings_1.default.getInstance().getShouldGroup()).toBe(shouldGroup);
});

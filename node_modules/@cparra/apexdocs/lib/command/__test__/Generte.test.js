"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const Generate_1 = require("../Generate");
const FileParser_1 = require("../../parser/FileParser");
jest.mock('fs');
jest.mock('../../parser/FileParser');
beforeEach(() => {
    FileParser_1.default.mockClear();
});
it('returns an empty list when there are no files', () => {
    fs.readdirSync.mockReturnValue([]);
    const classes = Generate_1.generate('src');
    expect(classes.length).toBe(0);
});
it('returns an empty list when there are no files ending in .cls', () => {
    fs.readdirSync.mockReturnValue(['file.xml', 'README.md']);
    const classes = Generate_1.generate('src', false);
    expect(classes.length).toBe(0);
});
it('returns parsed files when there are .cls files', () => {
    fs.readdirSync.mockReturnValue(['TestClass.cls', 'README.md']);
    fs.readFileSync.mockReturnValue('Raw class data');
    Generate_1.generate('src', false);
    expect(FileParser_1.default).toHaveBeenCalledTimes(1);
    const mockFileParserInstance = FileParser_1.default.mock.instances[0];
    const mockParseFileContents = mockFileParserInstance.parseFileContents;
    expect(mockParseFileContents).toHaveBeenCalledTimes(1);
    expect(mockParseFileContents).toHaveBeenCalledWith('Raw class data');
});

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const Settings_1 = require("../Settings");
const FileParser_1 = require("../parser/FileParser");
const DocsifyDocsProcessor_1 = require("../DocsifyDocsProcessor");
const JekyllDocsProcessor_1 = require("../JekyllDocsProcessor");
function generate(sourceDirectory, recursive = true, scope = ['global', 'public'], outputDir = 'docs', targetGenerator = 'jekyll', configPath, group) {
    Settings_1.default.getInstance().setScope(scope);
    Settings_1.default.getInstance().setOutputDir(outputDir);
    if (targetGenerator === 'jekyll') {
        Settings_1.default.getInstance().setDocsProcessor(new JekyllDocsProcessor_1.default());
    }
    else {
        Settings_1.default.getInstance().setDocsProcessor(new DocsifyDocsProcessor_1.default());
    }
    if (group !== undefined) {
        Settings_1.default.getInstance().setShouldGroup(group);
    }
    if (configPath) {
        Settings_1.default.getInstance().setConfigPath(configPath);
    }
    // TODO: Assert data validation to avoid exposing 'fs' and 'path' errors to callers.
    const classes = getClassesFromDirectory(sourceDirectory, recursive);
    // tslint:disable-next-line:no-console
    console.log(`Processed ${classes.length} files`);
    return classes;
}
exports.generate = generate;
function getClassesFromDirectory(sourceDirectory, recursive) {
    let classes = [];
    const directoryContents = fs.readdirSync(sourceDirectory);
    directoryContents.forEach(currentFile => {
        const currentPath = path.join(sourceDirectory, currentFile);
        if (recursive && fs.statSync(currentPath).isDirectory()) {
            classes = classes.concat(getClassesFromDirectory(currentPath, recursive));
        }
        if (!currentFile.endsWith('.cls')) {
            return;
        }
        const rawFile = fs.readFileSync(currentPath);
        const response = new FileParser_1.default().parseFileContents(rawFile.toString());
        if (!response) {
            return;
        }
        classes.push(response);
    });
    return classes;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ClassFileGeneratorHelper_1 = require("./ClassFileGeneratorHelper");
const ClassModel_1 = require("./model/ClassModel");
const Settings_1 = require("./Settings");
test('that getSanitizedGroup returns the same string when there is nothing to sanitize', () => {
    const testClass = new ClassModel_1.default();
    testClass.setClassGroup('GroupName');
    expect(ClassFileGeneratorHelper_1.default.getSanitizedGroup(testClass)).toBe('GroupName');
});
test('that getSanitizedGroup replaces spaces with dashes', () => {
    const testClass = new ClassModel_1.default();
    testClass.setClassGroup('Group Name');
    expect(ClassFileGeneratorHelper_1.default.getSanitizedGroup(testClass)).toBe('Group-Name');
});
test('that getSanitizedGroup removes dots', () => {
    const testClass = new ClassModel_1.default();
    testClass.setClassGroup('Group Na.me');
    expect(ClassFileGeneratorHelper_1.default.getSanitizedGroup(testClass)).toBe('Group-Name');
});
test('that getFileLink returns the correct string when grouping is off', () => {
    Settings_1.default.getInstance().setShouldGroup(false);
    const testClass = new ClassModel_1.default();
    testClass.setClassName('MyTestClassName');
    expect(ClassFileGeneratorHelper_1.default.getFileLink(testClass)).toBe('[MyTestClassName](/MyTestClassName.md)');
});
test('that getFileLink returns the correct string when grouping is on', () => {
    Settings_1.default.getInstance().setShouldGroup(true);
    const testClass = new ClassModel_1.default();
    testClass.setClassName('MyTestClassName');
    expect(ClassFileGeneratorHelper_1.default.getFileLink(testClass)).toBe(`[MyTestClassName](/${ClassFileGeneratorHelper_1.default.getSanitizedGroup(testClass)}/MyTestClassName.md)`);
});

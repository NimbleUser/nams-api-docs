"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const DocsProcessor_1 = require("./DocsProcessor");
const MarkdownHelper_1 = require("./MarkdownHelper");
const Settings_1 = require("./Settings");
const Configuration_1 = require("./Configuration");
const ClassFileGeneratorHelper_1 = require("./ClassFileGeneratorHelper");
class MarkdownDocsProcessor extends DocsProcessor_1.default {
    constructor() {
        super(...arguments);
        this.classes = [];
    }
    // tslint:disable-next-line:no-empty
    onBeforeHomeFileCreated(generator) { }
    // tslint:disable-next-line:no-empty
    onBeforeClassFileCreated(generator) { }
    onBeforeProcess(classes, outputDir) {
        this.classes = classes;
        const headerContent = Configuration_1.default.getHeader();
        // Generate home page listing all classes.
        const generator = new MarkdownHelper_1.default(classes);
        this.onBeforeHomeFileCreated(generator);
        if (headerContent) {
            generator.addText(headerContent);
        }
        generator.addTitle('Classes');
        if (!Settings_1.default.getInstance().getShouldGroup()) {
            classes.forEach(classModel => {
                generator.addBlankLine();
                generator.addTitle(ClassFileGeneratorHelper_1.default.getFileLink(classModel), 2);
                generator.addBlankLine();
                generator.addBlankLine();
                generator.addText(classModel.getDescription());
                generator.addBlankLine();
                generator.addBlankLine();
            });
        }
        else {
            const groupedClasses = this.group(classes);
            groupedClasses.forEach((value, key) => {
                generator.addTitle(key, 2);
                value.forEach(classModel => {
                    generator.addBlankLine();
                    generator.addTitle(ClassFileGeneratorHelper_1.default.getFileLink(classModel), 3);
                    generator.addBlankLine();
                    generator.addBlankLine();
                    generator.addText(classModel.getDescription());
                    generator.addBlankLine();
                    generator.addBlankLine();
                });
            });
        }
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir);
        }
        const filePath = path.join(outputDir, this.getHomeFileName());
        fs.writeFile(filePath, generator.contents, 'utf8', () => {
            // tslint:disable-next-line:no-console
            console.log('Home page generated.');
        });
    }
    process(classModel, outputDir) {
        var _a, _b;
        const generator = new MarkdownHelper_1.default(this.classes);
        this.onBeforeClassFileCreated(generator);
        const startingHeadingLevel = ((_b = (_a = Configuration_1.default.getConfig()) === null || _a === void 0 ? void 0 : _a.content) === null || _b === void 0 ? void 0 : _b.startingHeadingLevel) || 1;
        this.generateDocsForClass(generator, classModel, startingHeadingLevel);
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir);
        }
        let filePath;
        if (!Settings_1.default.getInstance().getShouldGroup()) {
            filePath = path.join(outputDir, `${classModel.getClassName()}.md`);
        }
        else {
            const classGroupPath = path.join(outputDir, ClassFileGeneratorHelper_1.default.getSanitizedGroup(classModel));
            if (!fs.existsSync(classGroupPath)) {
                fs.mkdirSync(classGroupPath);
            }
            filePath = path.join(classGroupPath, `${classModel.getClassName()}.md`);
        }
        fs.writeFile(filePath, generator.contents, 'utf8', () => {
            // tslint:disable-next-line:no-console
            console.log(`${classModel.getClassName()} processed.`);
        });
    }
    generateDocsForClass(generator, classModel, level) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        (_e = (_d = (_c = (_b = (_a = Configuration_1.default.getConfig()) === null || _a === void 0 ? void 0 : _a.content) === null || _b === void 0 ? void 0 : _b.injections) === null || _c === void 0 ? void 0 : _c.doc) === null || _d === void 0 ? void 0 : _d.onInit) === null || _e === void 0 ? void 0 : _e.forEach(injection => {
            generator.addText(injection);
        });
        const suffix = classModel.getIsInterface() ? 'interface' : classModel.getIsEnum() ? 'enum' : 'class';
        generator.addTitle(`${classModel.getClassName()} ${suffix}`, level);
        if (classModel.getDescription()) {
            generator.addBlankLine();
            generator.addText(classModel.getDescription());
            generator.addBlankLine();
        }
        if (((_g = (_f = Configuration_1.default.getConfig()) === null || _f === void 0 ? void 0 : _f.content) === null || _g === void 0 ? void 0 : _g.includeAuthor) && classModel.getAuthor()) {
            generator.addBlankLine();
            generator.addText(`**Author:** ${classModel.getAuthor()}`);
        }
        if (((_j = (_h = Configuration_1.default.getConfig()) === null || _h === void 0 ? void 0 : _h.content) === null || _j === void 0 ? void 0 : _j.includeDate) && classModel.getDate()) {
            generator.addBlankLine();
            generator.addText(`**Date:** ${classModel.getDate()}`);
        }
        if (classModel.getSeeList().length !== 0) {
            generator.addTitle('Related', level + 1);
            classModel.getSeeList().forEach(relatedClassName => {
                const relatedClass = this.classes.find(currentClassModel => currentClassModel.getClassName() === relatedClassName);
                generator.addBlankLine();
                if (relatedClass) {
                    generator.addText(ClassFileGeneratorHelper_1.default.getFileLink(relatedClass));
                }
                else {
                    generator.addText(relatedClassName);
                }
                generator.addBlankLine();
            });
        }
        generator.addHorizontalRule();
        this.addConstructors(generator, level, classModel);
        this.addEnums(generator, level, classModel);
        this.addProperties(generator, level, classModel);
        this.addMethods(generator, level, classModel);
        this.addInnerClasses(classModel, generator, level);
        (_p = (_o = (_m = (_l = (_k = Configuration_1.default.getConfig()) === null || _k === void 0 ? void 0 : _k.content) === null || _l === void 0 ? void 0 : _l.injections) === null || _m === void 0 ? void 0 : _m.doc) === null || _o === void 0 ? void 0 : _o.onEnd) === null || _p === void 0 ? void 0 : _p.forEach(injection => {
            generator.addText(injection);
        });
    }
    group(classes) {
        return classes.reduce((groups, currentClass) => {
            const key = currentClass.getClassGroup();
            const group = groups.get(key) || [];
            group.push(currentClass);
            groups.set(key, group);
            return groups;
        }, new Map());
    }
    addProperties(generator, level, classModel) {
        if (classModel.getProperties().length === 0) {
            return;
        }
        generator.addTitle('Properties', level + 1);
        generator.addBlankLine();
        classModel
            .getProperties()
            .sort((propA, propB) => {
            if (propA.getPropertyName() < propB.getPropertyName())
                return -1;
            if (propA.getPropertyName() > propB.getPropertyName())
                return 1;
            return 0;
        })
            .forEach(propertyModel => {
            generator.addTitle(`\`${propertyModel.getPropertyName()}\` â†’ \`${propertyModel.getReturnType()}\``, level + 2);
            if (propertyModel.getDescription()) {
                generator.addBlankLine();
                generator.addText(propertyModel.getDescription());
            }
            generator.addBlankLine();
        });
        generator.addHorizontalRule();
    }
    addConstructors(generator, level, classModel) {
        if (classModel.getMethods().filter(method => method.getIsConstructor()).length === 0) {
            return;
        }
        generator.addTitle('Constructors', level + 1);
        classModel
            .getMethods()
            .filter(method => method.getIsConstructor())
            .forEach(methodModel => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
            (_f = (_e = (_d = (_c = (_b = (_a = Configuration_1.default.getConfig()) === null || _a === void 0 ? void 0 : _a.content) === null || _b === void 0 ? void 0 : _b.injections) === null || _c === void 0 ? void 0 : _c.doc) === null || _d === void 0 ? void 0 : _d.method) === null || _e === void 0 ? void 0 : _e.onInit) === null || _f === void 0 ? void 0 : _f.forEach(injection => {
                generator.addText(injection);
            });
            generator.addTitle(`\`${methodModel.getSignature()}\``, level + 2);
            if (methodModel.getDescription()) {
                generator.addBlankLine();
                generator.addText(methodModel.getDescription());
            }
            if (methodModel.getParams().length) {
                this.addParameters(generator, level, methodModel);
            }
            if (methodModel.getThrownExceptions().length) {
                this.addThrowsBlock(generator, level, methodModel);
            }
            if (methodModel.getExample() !== '') {
                (_m = (_l = (_k = (_j = (_h = (_g = Configuration_1.default.getConfig()) === null || _g === void 0 ? void 0 : _g.content) === null || _h === void 0 ? void 0 : _h.injections) === null || _j === void 0 ? void 0 : _j.doc) === null || _k === void 0 ? void 0 : _k.method) === null || _l === void 0 ? void 0 : _l.onBeforeExample) === null || _m === void 0 ? void 0 : _m.forEach(injection => {
                    generator.addText(injection);
                });
                this.addExample(generator, methodModel, level);
            }
            (_t = (_s = (_r = (_q = (_p = (_o = Configuration_1.default.getConfig()) === null || _o === void 0 ? void 0 : _o.content) === null || _p === void 0 ? void 0 : _p.injections) === null || _q === void 0 ? void 0 : _q.doc) === null || _r === void 0 ? void 0 : _r.method) === null || _s === void 0 ? void 0 : _s.onEnd) === null || _t === void 0 ? void 0 : _t.forEach(injection => {
                generator.addText(injection);
            });
        });
        generator.addHorizontalRule();
    }
    addEnums(generator, level, classModel) {
        if (classModel.getChildEnums().length === 0) {
            return;
        }
        generator.addTitle('Enums', level + 1);
        classModel
            .getChildEnums()
            .sort((enumA, enumB) => {
            if (enumA.getClassName() < enumB.getClassName())
                return -1;
            if (enumA.getClassName() > enumB.getClassName())
                return 1;
            return 0;
        })
            .forEach(enumModel => {
            generator.addTitle(enumModel.getClassName(), level + 2);
            generator.addBlankLine();
            if (enumModel.getDescription()) {
                generator.addBlankLine();
                generator.addText(enumModel.getDescription());
                generator.addBlankLine();
            }
        });
        generator.addHorizontalRule();
    }
    addMethods(generator, level, classModel) {
        if (classModel.getMethods().filter(method => !method.getIsConstructor()).length === 0) {
            return;
        }
        generator.addTitle('Methods', level + 1);
        classModel
            .getMethods()
            .sort((methodA, methodB) => {
            if (methodA.getMethodName() < methodB.getMethodName())
                return -1;
            if (methodA.getMethodName() > methodB.getMethodName())
                return 1;
            return 0;
        })
            .filter(method => !method.getIsConstructor())
            .forEach(methodModel => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
            (_f = (_e = (_d = (_c = (_b = (_a = Configuration_1.default.getConfig()) === null || _a === void 0 ? void 0 : _a.content) === null || _b === void 0 ? void 0 : _b.injections) === null || _c === void 0 ? void 0 : _c.doc) === null || _d === void 0 ? void 0 : _d.method) === null || _e === void 0 ? void 0 : _e.onInit) === null || _f === void 0 ? void 0 : _f.forEach(injection => {
                generator.addText(injection);
            });
            generator.addTitle(`\`${methodModel.getSignature()}\` â†’ \`${methodModel.getReturnType()}\``, level + 2);
            if (methodModel.getDescription()) {
                generator.addBlankLine();
                generator.addText(methodModel.getDescription());
            }
            if (methodModel.getParams().length) {
                this.addParameters(generator, level, methodModel);
            }
            if (methodModel.getThrownExceptions().length) {
                this.addThrowsBlock(generator, level, methodModel);
            }
            if (methodModel.getExample() !== '') {
                (_m = (_l = (_k = (_j = (_h = (_g = Configuration_1.default.getConfig()) === null || _g === void 0 ? void 0 : _g.content) === null || _h === void 0 ? void 0 : _h.injections) === null || _j === void 0 ? void 0 : _j.doc) === null || _k === void 0 ? void 0 : _k.method) === null || _l === void 0 ? void 0 : _l.onBeforeExample) === null || _m === void 0 ? void 0 : _m.forEach(injection => {
                    generator.addText(injection);
                });
                this.addExample(generator, methodModel, level);
            }
            (_t = (_s = (_r = (_q = (_p = (_o = Configuration_1.default.getConfig()) === null || _o === void 0 ? void 0 : _o.content) === null || _p === void 0 ? void 0 : _p.injections) === null || _q === void 0 ? void 0 : _q.doc) === null || _r === void 0 ? void 0 : _r.method) === null || _s === void 0 ? void 0 : _s.onEnd) === null || _t === void 0 ? void 0 : _t.forEach(injection => {
                generator.addText(injection);
            });
        });
        generator.addHorizontalRule();
    }
    addInnerClasses(classModel, generator, level) {
        if (classModel.getChildClasses().length > 0) {
            generator.addTitle('Inner Classes', ++level);
            level++;
            generator.addBlankLine();
            classModel
                .getChildClasses()
                .sort((classA, classB) => {
                if (classA.getClassName() < classB.getClassName())
                    return -1;
                if (classA.getClassName() > classB.getClassName())
                    return 1;
                return 0;
            })
                .forEach(innerClass => {
                this.generateDocsForClass(generator, innerClass, level);
            });
        }
    }
    addParameters(generator, level, methodModel) {
        generator.addTitle('Parameters', level + 3);
        // Building a table to display the parameters
        generator.addText('|Param|Description|');
        generator.addText('|-----|-----------|');
        methodModel.getParams().forEach(param => {
            const paramName = param.substr(0, param.indexOf(' '));
            const paramDescription = param.substr(param.indexOf(' '));
            generator.addText(`|\`${paramName}\` | ${paramDescription} |`);
        });
        generator.addBlankLine();
    }
    addThrowsBlock(generator, level, methodModel) {
        generator.addTitle('Throws', level + 3);
        // Building a table to display the exceptions
        generator.addText('|Exception|Description|');
        generator.addText('|---------|-----------|');
        methodModel.getThrownExceptions().forEach(param => {
            const exceptionName = param.substr(0, param.indexOf(' '));
            const exceptionDescription = param.substr(param.indexOf(' '));
            generator.addText(`|\`${exceptionName}\` | ${exceptionDescription} |`);
        });
        generator.addBlankLine();
    }
    addExample(generator, methodModel, level) {
        generator.addTitle('Example', level + 3);
        generator.startCodeBlock();
        generator.addText(methodModel.getExample());
        generator.endCodeBlock();
        generator.addBlankLine();
    }
}
exports.default = MarkdownDocsProcessor;

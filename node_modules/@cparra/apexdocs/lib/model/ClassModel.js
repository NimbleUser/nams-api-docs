"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ApexModel_1 = require("./ApexModel");
const Configuration_1 = require("../Configuration");
class ClassModel extends ApexModel_1.default {
    constructor(parent) {
        var _a;
        super();
        this.methods = [];
        this.properties = [];
        this.childClasses = [];
        this.childEnums = [];
        this.strClassGroup = ((_a = Configuration_1.default.getConfig()) === null || _a === void 0 ? void 0 : _a.defaultGroupName) || 'Miscellaneous';
        this.strClassGroupContent = '';
        this.isInterface = false;
        this.isEnum = false;
        this.seeList = [];
        this.className = '';
        if (parent) {
            this.cmodelParent = parent;
        }
    }
    getProperties() {
        return this.properties;
    }
    setProperties(properties) {
        this.properties = properties;
    }
    getMethods() {
        return this.methods;
    }
    setMethods(methods) {
        this.methods = methods;
    }
    getChildClasses() {
        return this.childClasses;
    }
    addChildClass(child) {
        this.childClasses.push(child);
    }
    addChildEnum(childEnum) {
        this.childEnums.push(childEnum);
    }
    getChildEnums() {
        return this.childEnums;
    }
    getClassName() {
        if (this.className !== '') {
            return this.className;
        }
        let nameLine = this.getNameLine();
        const strParent = this.cmodelParent == null ? '' : this.cmodelParent.getClassName() + '.';
        if (nameLine != null)
            nameLine = nameLine.trim();
        if (nameLine != null && nameLine.trim().length > 0) {
            let fFound = nameLine.toLowerCase().indexOf('class ');
            let cch = 6;
            if (fFound === -1) {
                fFound = nameLine.toLowerCase().indexOf('interface ');
                cch = 10;
            }
            if (fFound > -1)
                nameLine = nameLine.substring(fFound + cch).trim();
            const lFound = nameLine.indexOf(' ');
            if (lFound === -1)
                return strParent + nameLine;
            try {
                const name = nameLine.substring(0, lFound);
                return strParent + name;
            }
            catch (ex) {
                return strParent + nameLine.substring(nameLine.lastIndexOf(' ') + 1);
            }
        }
        else {
            return '';
        }
    }
    setClassName(className) {
        this.className = className;
    }
    getTopmostClassName() {
        if (this.cmodelParent != null)
            return this.cmodelParent.getClassName();
        else
            return this.getClassName();
    }
    getClassGroup() {
        if (this.cmodelParent != null)
            return this.cmodelParent.getClassGroup();
        else
            return this.strClassGroup;
    }
    setClassGroup(strGroup) {
        this.strClassGroup = strGroup;
    }
    getClassGroupContent() {
        return this.strClassGroupContent;
    }
    setClassGroupContent(strGroupContent) {
        this.strClassGroupContent = strGroupContent;
    }
    getIsInterface() {
        return this.isInterface;
    }
    setIsInterface(isInterface) {
        this.isInterface = isInterface;
    }
    getIsEnum() {
        return this.isEnum;
    }
    setIsEnum(isEnum) {
        this.isEnum = isEnum;
    }
    addSee(seeClassName) {
        this.seeList.push(seeClassName);
    }
    getSeeList() {
        return this.seeList;
    }
}
exports.default = ClassModel;

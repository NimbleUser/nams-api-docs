"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ApexModel_1 = require("./ApexModel");
const utils_1 = require("../utils");
class MethodModel extends ApexModel_1.default {
    constructor() {
        super(...arguments);
        this.params = [];
        this.thrownExceptions = [];
        this.returnType = '';
        this.isConstructor = false;
    }
    setNameLine(nameLine, iLine) {
        // remove anything after the parameter list
        if (nameLine != null) {
            const i = nameLine.lastIndexOf(')');
            if (i >= 0)
                nameLine = nameLine.substring(0, i + 1);
        }
        super.setNameLine(nameLine, iLine);
    }
    getParams() {
        return this.params;
    }
    setParams(params) {
        this.params = params;
    }
    getThrownExceptions() {
        return this.thrownExceptions;
    }
    setThrownExceptions(thrownExceptions) {
        this.thrownExceptions = thrownExceptions;
    }
    getReturnType() {
        if (this.isConstructor) {
            // If the method is a constructor, then it return the same type as its name.
            return this.getMethodName();
        }
        const nameLine = this.getNameLine().trim();
        if (nameLine != null && nameLine.length > 0) {
            const lastindex = nameLine.indexOf(this.getMethodName());
            if (lastindex >= 0) {
                const returnType = utils_1.findPreviousWord(nameLine, lastindex);
                return returnType ? returnType : '';
            }
        }
        return '';
    }
    getMethodName() {
        const nameLine = this.getNameLine().trim();
        if (nameLine != null && nameLine.length > 0) {
            const lastindex = nameLine.indexOf('(');
            if (lastindex >= 0) {
                const methodName = utils_1.findPreviousWord(nameLine, lastindex);
                return methodName ? methodName : '';
            }
        }
        return '';
    }
    getSignature() {
        const nameLine = this.getNameLine().trim();
        if (nameLine != null && nameLine.length > 0) {
            const beginParen = nameLine.indexOf('(');
            return this.getMethodName() + nameLine.substring(beginParen);
        }
    }
    setIsConstructor(isConstructor) {
        this.isConstructor = isConstructor;
    }
    getIsConstructor() {
        return this.isConstructor;
    }
}
exports.default = MethodModel;
